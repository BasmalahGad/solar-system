name: solar system workflow

on:
    workflow_dispatch:
    push:
        branches:
            - feature-branch-A
            - main

env:
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
    unit-testing:
        name: unit testing
        strategy:
            matrix:
                nodejs_version: [18, 19, 20]
                os: [ubuntu-latest, macos-latest, windows-latest]
                
                exclude:
                    - nodejs_version: 18
                      os: macos-latest
        runs-on: ${{ matrix.os }}
        steps:
            - name: checkout repo
              uses: actions/checkout@v5

            - name: setup nodejs version - ${{ matrix.nodejs_version }}
              uses: actions/setup-node@v4.4.0
              with:
                node-version: ${{ matrix.nodejs_version }}

            - name: install dep
              run: npm install

            - name: run unit tests
              id: nodejs-unit-testing-step
              run: npm test

            - name: archive test result
              if: steps.nodejs-unit-testing-step.outcome == 'failure' || steps.nodejs-unit-testing-step.outcome == 'success'
              uses: actions/upload-artifact@v4.6.2
              with:
                name: mocha-test-result-${{ matrix.os }}-${{matrix.nodejs_version}}
                path: test-results.xml


    code-coverage:
        name: code coverage
        needs: unit-testing
        runs-on: ubuntu-latest
        steps:
            - name: checkout repo
              uses: actions/checkout@v5

            - name: setup nodejs version - 18
              uses: actions/setup-node@v4.4.0
              with:
                node-version: 18

            - name: install dep
              run: npm install

            - name: check code coverage
              continue-on-error: true
              run: npm run coverage
            
            - name: archive coverage results
              uses: actions/upload-artifact@v4.6.2
              with:
                name: code-coverage-result
                path: coverage
                retention-days: 5

    docker: 
        name: containerization
        needs: [code-coverage, unit-testing]
        permissions:
            packages: write
        runs-on: ubuntu-latest
        steps:
            - name: checkout repo
              uses: actions/checkout@v5

            - name: docker login
              uses: docker/login-action@v3.5.0
              with:
                username: ${{ vars.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_TOKEN }}     
                
            - name: GHCR login
              uses: docker/login-action@v3.5.0
              with:
                registry: ghcr.io
                username: ${{ github.repository_owner }}
                password: ${{ secrets.GITHUB_TOKEN }}

            - name: build docker file 
              uses: docker/build-push-action@v6
              with:
                push: false
                tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:latest

            - name: test docker image
              run: |
               docker images
               docker run --name solar-system-app -d \
               -p 3000:3000 \
               -e MONGO_URI=$MONGO_URI \
               -e MONGO_USERNAME=$MONGO_USERNAME \
               -e MONGO_PASSWORD=$MONGO_PASSWORD \
               ${{ vars.DOCKERHUB_USERNAME }}/solar-system:latest
               export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
               echo $IP

               echo testing image url using wget
               wget -q -O - 127.0.0.1:3000/live | grep live

            - name: build & push docker file 
              uses: docker/build-push-action@v6
              with:
                push: true
                tags: |
                  ${{ vars.DOCKERHUB_USERNAME }}/solar-system:latest
                #   ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}

    # terraform:
    #     name: terraform deployment
    #     needs: docker
    #     runs-on: ubuntu-latest
    #     environment: production
    #     steps:
    #         - name: checkout config files
    #           uses: actions/checkout@v5

    #         - name: configure aws 
    #           uses: aws-actions/configure-aws-credentials@v4.3.1
    #           with:
    #             aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #             aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #             aws-region: us-east-2
            
    #         - name: terraform init
    #           run: terraform init
    #           working-directory: ./Terraform


    #         - name: terraform plan
    #           run: terraform plan
    #           working-directory: ./Terraform
    # deploy:
    #     runs-on: ubuntu-latest
    #     steps:
    #         - name: checkout config files
    #           uses: actions/checkout@v5
        
    #         - name: configure aws 
    #           uses: aws-actions/configure-aws-credentials@v4.3.1
    #           with:
    #             aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #             aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #             aws-region: us-east-2

    
    terraform:
        name: terraform deployment
        needs: docker
        runs-on: ubuntu-latest 
        environment: production
        steps:
            - name: checkout config files
              uses: actions/checkout@v5

            - name: configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4.3.1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: us-east-1

            - name: hashicorp - setup terraform
              uses: hashicorp/setup-terraform@v3.1.2
              with:
                terraform_version: "1.1.7"

            - name: terraform init
              run: terraform init 
              working-directory: ./infrastructure

            - name: terraform plan
              run: terraform plan
              working-directory: ./infrastructure

            - name: terraform apply
              run: terraform apply -auto-approve
              working-directory: ./infrastructure

    deploy:
        name: deploy to EKS cluster
        needs: terraform
        runs-on: ubuntu-latest
        steps:
            - name: checkout config files
              uses: actions/checkout@v5

            - name: configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4.3.1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: us-east-1

            - name: Update kubeconfig
              run: aws eks --region us-east-1 update-kubeconfig --name solar-system

            - name: trigger app deployment
              uses: statsig-io/kubectl-via-eksctl@main
              env:
                aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                region: us-east-1
                cluster: solar-system

            - name: deploy to EKS
              run: |
                kubectl apply -f deployment.yaml
                kubectl apply -f service.yaml
              working-directory: ./kubernetes

            - name: verify deployment
              run: |
                kubectl get pods  
                kubectl get svc
